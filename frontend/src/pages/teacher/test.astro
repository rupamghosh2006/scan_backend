---
import Layout from "../../layouts/Layout.astro";
import Navbar from "../../components/Navbar.astro";
---

<Layout>
  <Navbar />

  <main class="flex flex-col items-center p-4 flex-1 w-full max-w-xl mx-auto">
    <h1 class="text-2xl font-bold mb-6">Schedule a Test</h1>

    <form class="space-y-6 w-full">
      <div>
        <label class="block mb-1 font-medium">Select Class</label>
        <select id="classSelect" class="w-full p-2 border rounded">
          <option selected disabled>Choose Class</option>
          <option>Class 11</option>
          <option>Class 12</option>
        </select>
      </div>

      <div>
        <label class="block mb-1 font-medium">Select Subjects</label>
        <select id="subjectSelect" multiple class="w-full p-2 border rounded">
          <option value="physics">Physics</option>
          <option value="chemistry">Chemistry</option>
          <option value="math">Math</option>
          <option value="biology">Biology</option>
        </select>
      </div>

      <div id="subjectButtons" class="space-y-2"></div>

      <div class="bg-white p-4 border rounded shadow-sm">
        <h2 class="font-semibold mb-2 text-lg">Selected Chapters:</h2>
        <div id="selectedChapters" class="text-sm text-gray-700 whitespace-pre-line"></div>
      </div>

      <div>
        <label class="block mb-1 font-medium">Test Date & Time</label>
        <input type="datetime-local" class="w-full p-2 border rounded" />
      </div>

      <div>
        <label class="block mb-1 font-medium">Total Marks</label>
        <input type="number" class="w-full p-2 border rounded" placeholder="Enter total marks" />
      </div>

      <div>
        <label class="block mb-1 font-medium">Number of Sets</label>
        <input type="number" class="w-full p-2 border rounded" placeholder="e.g. 2 or 3" />
      </div>

      <button type="submit" class="w-full bg-cyan-600 hover:bg-cyan-700 text-white font-semibold py-2 rounded">
        Generate Test
      </button>
    </form>
  </main>

  <!-- Chapter Selection Modal -->
  <div id="chapterModal" class="fixed inset-0 bg-black/50 hidden items-center justify-center z-50">
    <div class="bg-white w-11/12 max-w-md p-6 rounded shadow">
      <h3 id="modalSubject" class="text-xl font-semibold mb-4">Select Chapters</h3>
      <div id="chapterList" class="mb-4 max-h-60 overflow-y-auto"></div>
      <div class="flex justify-end space-x-2">
        <button type="button" onclick="closeModal()" class="px-4 py-2 bg-gray-300 rounded">Cancel</button>
        <button type="button" onclick="confirmChapters()" class="px-4 py-2 bg-cyan-600 text-white rounded">Save</button>
      </div>
    </div>
  </div>

  <script is:inline>
    const chapterData = {
      physics: ["Units & Measurements", "Kinematics", "Laws of Motion", "Work, Power & Energy", "Thermodynamics", "Waves", "Electrostatics", "Current Electricity", "Magnetism", "Optics", "Modern Physics"],
      chemistry: ["Some Basic Concepts", "Structure of Atom", "Periodic Table", "Chemical Bonding", "States of Matter", "Thermodynamics", "Solid State", "Solutions", "Electrochemistry", "Chemical Kinetics", "Biomolecules"],
      math: ["Sets", "Relations & Functions", "Trigonometry", "Complex Numbers", "Matrices & Determinants", "Differentiation", "Integration", "Vectors & 3D Geometry", "Probability", "Statistics"],
      biology: ["Diversity of Living World", "Cell", "Plant Physiology", "Human Physiology", "Reproduction", "Genetics", "Evolution", "Human Health & Diseases", "Ecology"]
    };

    const subjectSelect = document.getElementById("subjectSelect");
    const subjectButtons = document.getElementById("subjectButtons");
    const selectedChaptersBox = document.getElementById("selectedChapters");

    const chapterModal = document.getElementById("chapterModal");
    const chapterList = document.getElementById("chapterList");
    const modalSubject = document.getElementById("modalSubject");

    let currentSubject = "";
    const selections = {};

    subjectSelect.addEventListener("change", () => {
      subjectButtons.innerHTML = "";
      Array.from(subjectSelect.selectedOptions).forEach(option => {
        const subject = option.value;
        const label = option.textContent;
        const button = document.createElement("button");
        button.textContent = `Select ${label} Chapters`;
        button.className = "bg-cyan-500 hover:bg-cyan-600 text-white px-4 py-2 rounded w-full";
        button.addEventListener("click", (e) => {
          e.preventDefault();
          openModal(subject, label);
        });
        subjectButtons.appendChild(button);
      });
    });

    function openModal(subject, label) {
      currentSubject = subject;
      modalSubject.textContent = `Select Chapters for ${label}`;
      chapterList.innerHTML = chapterData[subject].map(ch => {
        const checked = selections[subject]?.includes(ch) ? 'checked' : '';
        return `<label class='block'><input type='checkbox' value="${ch}" ${checked} class='mr-2'/>${ch}</label>`;
      }).join("");
      chapterModal.classList.remove("hidden");
      chapterModal.classList.add("flex");
    }

    function closeModal() {
      chapterModal.classList.add("hidden");
      chapterModal.classList.remove("flex");
    }

    function confirmChapters() {
      const selected = Array.from(chapterList.querySelectorAll("input:checked")).map(i => i.value);
      selections[currentSubject] = selected;
      updateChapterSummary();
      closeModal();
    }

    function updateChapterSummary() {
      const result = [];
      for (const subject in selections) {
        if (selections[subject].length) {
          const label = subject.charAt(0).toUpperCase() + subject.slice(1);
          result.push(`${label}:\n- ${selections[subject].join("\n- ")}`);
        }
      }
      selectedChaptersBox.innerText = result.join("\n\n");
    }
  </script>

   <script is:inline>
  const token = localStorage.getItem("token");

  if (!token) {
    alert("Please login first.");
    window.location.href = "/";
  } else {
    fetch("http://localhost:4000/api/v1/students/validate", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    }).then(res => {
      if (res.status === 401 || res.status === 403) {
        localStorage.removeItem("token");
        window.location.href = "/";
      }
    }).catch(err => {
      console.error("Validation error:", err);
      localStorage.removeItem("token");
      window.location.href = "/";
    });
  }
</script>
</Layout>
